//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project/Data/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Project
{
    public partial class @GameInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Multimeter"",
            ""id"": ""272f6d14-89ba-496f-b7ff-215263d3219f"",
            ""actions"": [
                {
                    ""name"": ""NextMode"",
                    ""type"": ""Value"",
                    ""id"": ""a055fafa-40ce-4639-bd0c-85ebd2be1eb0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PreviousMode"",
                    ""type"": ""Value"",
                    ""id"": ""12f15af4-6168-4256-9d03-8db633c76b64"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9fea58a-f297-4c60-8607-217bbb6dd320"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""NextMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""919d7a87-2a3b-4a9e-a787-f0e334c1f379"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""PreviousMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Multimeter
            m_Multimeter = asset.FindActionMap("Multimeter", throwIfNotFound: true);
            m_Multimeter_NextMode = m_Multimeter.FindAction("NextMode", throwIfNotFound: true);
            m_Multimeter_PreviousMode = m_Multimeter.FindAction("PreviousMode", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Multimeter
        private readonly InputActionMap m_Multimeter;
        private IMultimeterActions m_MultimeterActionsCallbackInterface;
        private readonly InputAction m_Multimeter_NextMode;
        private readonly InputAction m_Multimeter_PreviousMode;
        public struct MultimeterActions
        {
            private @GameInput m_Wrapper;
            public MultimeterActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @NextMode => m_Wrapper.m_Multimeter_NextMode;
            public InputAction @PreviousMode => m_Wrapper.m_Multimeter_PreviousMode;
            public InputActionMap Get() { return m_Wrapper.m_Multimeter; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MultimeterActions set) { return set.Get(); }
            public void SetCallbacks(IMultimeterActions instance)
            {
                if (m_Wrapper.m_MultimeterActionsCallbackInterface != null)
                {
                    @NextMode.started -= m_Wrapper.m_MultimeterActionsCallbackInterface.OnNextMode;
                    @NextMode.performed -= m_Wrapper.m_MultimeterActionsCallbackInterface.OnNextMode;
                    @NextMode.canceled -= m_Wrapper.m_MultimeterActionsCallbackInterface.OnNextMode;
                    @PreviousMode.started -= m_Wrapper.m_MultimeterActionsCallbackInterface.OnPreviousMode;
                    @PreviousMode.performed -= m_Wrapper.m_MultimeterActionsCallbackInterface.OnPreviousMode;
                    @PreviousMode.canceled -= m_Wrapper.m_MultimeterActionsCallbackInterface.OnPreviousMode;
                }
                m_Wrapper.m_MultimeterActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @NextMode.started += instance.OnNextMode;
                    @NextMode.performed += instance.OnNextMode;
                    @NextMode.canceled += instance.OnNextMode;
                    @PreviousMode.started += instance.OnPreviousMode;
                    @PreviousMode.performed += instance.OnPreviousMode;
                    @PreviousMode.canceled += instance.OnPreviousMode;
                }
            }
        }
        public MultimeterActions @Multimeter => new MultimeterActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_XRSchemeIndex = -1;
        public InputControlScheme XRScheme
        {
            get
            {
                if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
                return asset.controlSchemes[m_XRSchemeIndex];
            }
        }
        public interface IMultimeterActions
        {
            void OnNextMode(InputAction.CallbackContext context);
            void OnPreviousMode(InputAction.CallbackContext context);
        }
    }
}
